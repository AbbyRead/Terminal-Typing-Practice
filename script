#!/bin/bash

# Check if bat is installed
if ! command -v bat &>/dev/null; then
	echo "Error: 'bat' command not found."
	exit 1
fi

stdin_has_data() {
	! [ -t 0 ]
}

# Default language
language="C"
file_arg=""

# Argument parsing
while [[ $# -gt 0 ]]; do
	case "$1" in
		--language=*)
			language="${1#*=}"
			shift
			;;
		-l)
			shift
			if [ -n "$1" ]; then
				language="$1"
				shift
			else
				echo "Error: Missing argument for -l"
				exit 1
			fi
			;;
		--language)
			shift
			if [ -n "$1" ]; then
				language="$1"
				shift
			else
				echo "Error: Missing argument for --language"
				exit 1
			fi
			;;
		-*)
			echo "Unknown option: $1"
			exit 1
			;;
		*)
			file_arg="$1"
			shift
			;;
	esac
done

# Determine input
if [ -n "$file_arg" ]; then
	input=$(cat "$file_arg")
elif stdin_has_data; then
	input=$(cat)
else
	input=$(pbpaste)
fi

tempfile=$(mktemp)

# Terminal width
term_cols=$(tput cols)

# Process each line
echo "$input" | bat -pp --force-colorization --language="$language" | while IFS= read -r line; do
	echo -e "$line"

	# Read user input from terminal
	IFS= read -r user_input < /dev/tty

	# Calculate how many lines it wraps over
	input_len=${#user_input}
	lines_up=$(((input_len + term_cols - 1) / term_cols))

	# Save and display colorized input
	echo "$user_input" >"$tempfile"

	# Hide cursor
	tput civis

	for ((i = 0; i < lines_up; i++)); do
		tput cuu1
		tput el
	done

	bat -pp --force-colorization --language="$language" "$tempfile"

	# Show cursor
	tput cnorm

	echo ""

done

rm "$tempfile"
